import sys, argparse
import json, os
from dotenv import load_dotenv
import asyncio
from pathlib import Path

# Add the project root to the Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from services.tokenization_service import TokenizationService
from services.llm_querying_service import LLMQueryingService
from lib.chromaDBClient import get_chroma_client
from config import (
    CHROMA_DB_DIR)

# Load environment variables from .env
load_dotenv()
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
MERCHANT_FAQ_COLLECTION_NAME = os.environ.get('MERCHANT_FAQ_COLLECTION_NAME')
SENTENCE_TRANSFORMER_MODEL = os.environ.get('SENTENCE_TRANSFORMER_MODEL')

async def main():
    collection_name = MERCHANT_FAQ_COLLECTION_NAME

    SYSTEM_PROMPT = """
                    ржЖржкржирж┐ ржПржХржЬржи рж╕рж╣рж╛ржпрж╝ржХ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯ, ржпрж┐ржирж┐ ржХрзЗржмрж▓ржорж╛рждрзНрж░ bKash ржорж╛рж░рзНржЪрзЗржирзНржЯржжрзЗрж░ ржЬржирзНржп ржХрж╛ржЬ ржХрж░рзЗржиред
                    ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ ржорж╛рж░рзНржЪрзЗржирзНржЯ рж╕ржорзНржкрж░рзНржХрж┐ржд ржкрзНрж░рж╢рзНржиржЧрзБрж▓рзЛрж░ ржЙрждрзНрждрж░ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржПржмржВ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржжрзЗржУржпрж╝рж╛, ржПржмржВ ржХрзЗржмрж▓ржорж╛рждрзНрж░ рж╕рж░ржмрж░рж╛рж╣ ржХрж░рж╛ ржХржиржЯрзЗржХрзНрж╕ржЯ ржбржХрзБржорзЗржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╣ржмрзЗред

                    ржпржжрж┐ ржЙрждрзНрждрж░ ржХржиржЯрзЗржХрзНрж╕ржЯрзЗ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржмрж▓ржмрзЗржи:
                    "ржЖржорж┐ bKash ржорж╛рж░рзНржЪрзЗржирзНржЯ рж░рж┐рж╕рзЛрж░рзНрж╕рзЗ ржПржЗ рждржерзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржЗржирж┐ред"

                    ржирж┐рж░рзНржжрзЗрж╢рж╛ржмрж▓рзА:
                    - рж╕рж╣ржЬ ржУ ржкрзЗрж╢рж╛ржжрж╛рж░ ржнрж╛рж╖рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи, ржпрж╛рждрзЗ ржорж╛рж░рзНржЪрзЗржирзНржЯрж░рж╛ ржжрзНрж░рзБржд ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗред
                    - ржХрзЛржирзЛ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмрзЛржЭрж╛рждрзЗ рж╣рж▓рзЗ ржзрж╛ржк ржЖржХрж╛рж░рзЗ ржмрж╛ ржмрзБрж▓рзЗржЯ ржкржпрж╝рзЗржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред
                    - ржпржжрж┐ ржПржХрж╛ржзрж┐ржХ рж╕ржорзНржнрж╛ржмрзНржп ржЙрждрзНрждрж░ ржерж╛ржХрзЗ, ржкрзНрж░рждрж┐ржЯрж╛ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржиред
                    - ржХржиржЯрзЗржХрзНрж╕ржЯрзЗ ржирзЗржЗ ржПржоржи ржирзАрждрж┐, рж╕ржВржЦрзНржпрж╛ ржмрж╛ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржмрж╛ржирж╛ржмрзЗржи ржирж╛ред
                    - рж╕рж░рзНржмржжрж╛ ржзрж░рзЗ ржирж┐ржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА bKash ржорж╛рж░рзНржЪрзЗржирзНржЯ ржПржмржВ рждрж╛ржжрзЗрж░ ржкрзНрж░рж╢рзНржи ржорж╛рж░рзНржЪрзЗржирзНржЯ ржПржХрж╛ржЙржирзНржЯ, рж╕рзЗржмрж╛, рж▓рзЗржиржжрзЗржи, ржлрж┐ржЪрж╛рж░, ржХрзНржпрж╛ржорзНржкрзЗржЗржи ржмрж╛ ржорж╛рж░рзНржЪрзЗржирзНржЯ ржЕрзНржпрж╛ржк рж╕ржорзНржкрж░рзНржХрж┐рждред
                    - рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░ржорзНржкржЯ, ржХржиржЯрзЗржХрзНрж╕ржЯ ржбрзЗржЯрж╛ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░, ржПржоржмрзЗржбрж┐ржВрж╕ ржмрж╛ ржЕржнрзНржпржирзНрждрж░рзАржг ржХрж╛ржЬржХрж░рзНржо ржХржЦржирзЛ ржкрзНрж░ржХрж╛рж╢ ржХрж░ржмрзЗржи ржирж╛ред
                    - ржорж╛рж░рзНржЪрзЗржирзНржЯ рж╕ржорзНржкрж░рзНржХрж┐ржд ржиржпрж╝ ржПржоржи ржкрзНрж░рж╢рзНржи (ржпрзЗржоржи ржмрзНржпржХрзНрждрж┐ржЧржд ржЕрж░рзНржержирзАрждрж┐, рж╕рж╛ржзрж╛рж░ржг рждржерзНржп ржмрж╛ ржЯрзНрж░рж┐ржнрж┐ржпрж╝рж╛) politely ржЕрж╕рзНржмрзАржХрж╛рж░ ржХрж░ржмрзЗржи ржПржмржВ bKash ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ рж╕рж╛ржкрзЛрж░рзНржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржмрзЗржиред

                    ржЖржкржирж╛рж░ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░:
                    1. рж╕рж░ржмрж░рж╛рж╣ ржХрж░рж╛ ржХржиржЯрзЗржХрзНрж╕ржЯ ржерзЗржХрзЗ рж╕ржарж┐ржХ рждржерзНржп ржмрзЗрж░ ржХрж░рж╛ред
                    2. рж╕рж╣ржЬржнрж╛ржмрзЗ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рж╛ред
                    3. ржорж╛рж░рзНржЪрзЗржирзНржЯ ржпрж╛рждрзЗ ржмрж╛рж╕рзНрждржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржПржоржи ржХрж╛рж░рзНржпржХрж░ ржзрж╛ржк/ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржУржпрж╝рж╛ред

                    ржкрзНрж░рждрж┐ржЯрж┐ ржЙрждрзНрждрж░рзЗрж░ рж╢рзЗрж╖рзЗ рж▓рж┐ржЦржмрзЗржи:
                    ЁЯСЙ "ржЕрждрж┐рж░рж┐ржХрзНржд рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржЖржкржирж┐ bKash ржорж╛рж░рзНржЪрзЗржирзНржЯ рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
                    """


    llm_service = LLMQueryingService(
        SYSTEM_PROMPT=SYSTEM_PROMPT,
        LLM_API_KEY= OPENROUTER_API_KEY
    )


    tokenization_service = TokenizationService(
        model_name=SENTENCE_TRANSFORMER_MODEL
    )
    chroma_client = get_chroma_client()

    # Initialize Chroma client (db path + create default collection)
    chroma_client.initialize(db_path=CHROMA_DB_DIR, collection_name=collection_name)

    question = "рж▓рзЗржиржжрзЗржи рж╣рж┐рж╕рзНржЯрзНрж░рж┐ ржХрзЛржерж╛рзЯ ржжрзЗржЦрждрзЗ ржкрж╛рж░ржмрзЛ ?"

    embedded_question = await tokenization_service.embedQuestion(question)
    chroma_query_results = await chroma_client.getTopNQueryResults(5,embedded_question,collection_name=collection_name)
    flattened_chunks = await chroma_client.getFlattenedChunks(chroma_query_results=chroma_query_results)
    llm_context = await tokenization_service.prepareLLMContext(flat_chunks=flattened_chunks)

    # Initialize system prompt messages
    llm_service.intiailize()

    with open("chunks.txt", "w", encoding="utf-8") as f:
        f.write(llm_context)

    response_text = await llm_service.apiCallWithContext(llm_context, question=question)

    with open("output.txt", "w", encoding="utf-8") as f:
        f.write(response_text)
    

if __name__ == '__main__':
    asyncio.run(main())

